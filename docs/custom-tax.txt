.. _custom-tax-modules:

Custom Tax Modules
==================

Building your module
--------------------

In a custom tax module, most of the work is done in the
``processor.py`` file. You will also need a ``config.py``
file in order to make your processor available to Satchmo.

The current tax processors are all subclasses of the ``BaseProcessor``
found in ``tax.modules.base``.


Processor Class
---------------

Every tax module must implement a ``Processor`` class that implements each of the methods in 
``tax.modules.base.processor.BaseProcessor``.  Your module's ``Processor`` may subclass
``BaseProcessor`` or one of the other tax processors' ``Processor`` classes.

Below is a very simple tax processor that returns ``0`` for all tax rates::

    from decimal import Decimal
    from tax.modules.base.processor import BaseProcessor
    
    class Processor(BaseProcessor):
        
        method="YOUR_MODULE_NAME"
        
        def __init__(self, order=None, user=None):
            self.order = order
            self.user = user
    
        def by_product(self, product, quantity=Decimal('1')):
            """
            Calculate tax given a product and quantity
            """
            return Decimal("0.0")
            
        def by_orderitem(self, orderitem):
            """
            Calculate tax given a line item from an order
            """
            return Decimal("0.0")
                    
        def by_price(self, taxclass, price):
            """
            Calculate tax given a price and tax class
            """
            return Decimal("0.0")     
                    
        def shipping(self, *args, **kwargs):
            """
            Calculate the tax on shipping
            """
            return Decimal("0.0")                
                    
        def process(self, order=None):
            """
            Calculate the tax for an entire order
            """
            if order:
                self.order = order
            else:
                order = self.order
            
            rate = self.get_rate()
            sub_total = Decimal("0.00")
            
            # calculate total cost of taxable products
            for item in order.orderitem_set.filter(product__taxable=True):
                sub_total += item.sub_total
            
            # calculate total tax
            itemtax = sub_total * rate
            # This is how we'll display it
            taxrates = {'%i%%' % percent :  itemtax}
            
            # if appropriate, calculate tax on shipping
            # and update subtotals accordingly
            if config_value('TAX','TAX_SHIPPING'):
                shipping = order.shipping_sub_total
                sub_total += shipping
                ship_tax = self.shipping(shipping)
                taxrates['Shipping'] = ship_tax
            
            tax = sub_total * rate
            return tax, taxrates
    
        def get_rate(self, *args, **kwargs):
            """
            Return the tax rate as a rate value (a Decimal between 0 and 1)
            """
            return Decimal("0")


Each of the methods should be replaced with your own tax calculation logic.  

Two additional methods, ``get_percent`` and ``by_product_and_price`` exist, and must be 
implemented in any tax processor class that does not subclass ``BaseProcessor``.  
In ``BaseProcessor`` subclasses, unless overridden, ``get_percent`` returns 
``self.get_rate() * 100``, and ``by_product_and_price(taxclass, price, product=None)`` 
returns ``self.by_price(taxclass, price)``.


Enabling Your Processor
-----------------------
To enable your processor, a ``config.py`` file is recommended.  This file is used to implement
the LiveSettings for your tax module.  A typical ``config.py`` might look like this::

    from django.utils.translation import ugettext_lazy as _
    from livesettings import * 
    from tax.config import TAX_MODULE
    
    # Adds your tax processor to the list of available tax options
    TAX_MODULE.add_choice(('tax.modules.YOUR_MODULE_NAME', _('SHORT MODULE DESCRIPTION')))
    TAX_GROUP = config_get_group('TAX')
          
    
    # OPTIONAL:Add a livesetting for whether shipping is taxed
    config_register(
         BooleanValue(TAX_GROUP,
             'TAX_SHIPPING',
             description=_("Tax Shipping?"),
             requires=TAX_MODULE,
             requiresvalue='tax.modules.YOUR_MODULE_NAME',
             default=False)
    )
    
    # OPTIONAL: Add a livesetting for selecting a tax class for shipping
    config_register(
         StringValue(TAX_GROUP,
             'TAX_CLASS',
             description=_("TaxClass for shipping"),
             help_text=_("Select a TaxClass that should be applied for shipments."),
             default='Shipping'
         )
    )
    
Replace ``YOUR_MODULE_NAME`` and ``SHORT MODULE DESCRIPTION`` with your own values.  
Then make sure that the app with your product model is in your project's 
``INSTALLED_APPS`` setting.


